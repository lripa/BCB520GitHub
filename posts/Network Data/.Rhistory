layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 20,
vertex.label.cex = 0.7,
vertex.label.color = "black",
vertex.label.font = 2,
edge.width = 2)
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 1.2,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")                          # No box around the legend
# Assuming 'relations3' and 'people' data frames are already created and contain the combined relationships and people data respectively
# Convert 'relations3' into an igraph object
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
# The remaining parts of your code seem to be repetitions or incorrectly ordered. Make sure to organize your code logically, grouping related operations coherently.
library(dplyr)
library(igraph)
# Assuming 'g' is your graph object and 'department_colors' is your named vector of colors
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"),
c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Plot your graph
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 20,
vertex.label.cex = 0.7,
vertex.label.color = "black",
vertex.label.font = 2,
edge.width = 2)
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 1.2,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")                          # No box around the legend
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
library(dplyr)
library(igraph)
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 1.2,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")                          # No box around the legend
library(dplyr)
library(igraph)
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 1.2,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")                          # No box around the legend
library(dplyr)
library(igraph)
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 1.2,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")
library(dplyr)
library(igraph)
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 1.2,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")
library(dplyr)
library(igraph)
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 0.8,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")
# install.packages("igraph")
library(igraph)
g <- make_empty_graph()
g <- make_graph(edges = c(1,2, 1,5), n=10, directed = FALSE)
g
summary(g)
g <- make_graph('Zachary')
plot(g)
g <- add_vertices(g, 3)
g <- add_edges(g, edges = c(1,35, 1,36, 34,37))
g <- g %>% add_edges(edges=c(1,34)) %>% add_vertices(3) %>%
add_edges(edges=c(38,39, 39,40, 40,38, 40,37))
g
plot(g)
get.edge.ids(g, c(1,34))
g <- delete_edges(g, 82)
g <- make_ring(10) %>% delete_edges("10|1")
plot(g)
g <- make_ring(5)
g <- delete_edges(g, get.edge.ids(g, c(1,5, 4,5)))
plot(g)
graph1 <- make_tree(127, 2, mode = "undirected")
summary(graph1)
plot(graph1)
graph2 <- make_tree(127, 2, mode = "undirected")
identical_graphs(graph1,graph2)
graph1 <- sample_grg(100, 0.2)
summary(graph1)
plot(graph1)
graph2 <- sample_grg(100, 0.2)
identical_graphs(graph1, graph2)
plot(graph2)
isomorphic(graph1, graph2)
g <- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,
George-Dennis:Frank, Dennis-Esther)
V(g)$age <- c(25, 31, 18, 23, 47, 22, 50)
V(g)$gender <- c("f", "m", "f", "m", "m", "f", "m")
E(g)$is_formal <- c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE)
summary(g)
E(g)$is_formal
E(g)$is_formal[1] <- TRUE
E(g)$is_formal
g$date <- c("2022-02-11")
graph_attr(g, "date")
match(c("George"), V(g)$name)
V(g)$name[1:3] <- c("Alejandra", "Bruno", "Carmina")
V(g)
g <- delete_vertex_attr(g, "gender")
V(g)$gender
degree(g)
degree(g, 7)
degree(g, v=c(3,4,5))
degree(g, v=c("Carmina", "Frank", "Dennis"))
degree(g, "Bruno")
edge_betweenness(g)
ebs <- edge_betweenness(g)
as_edgelist(g)[ebs == max(ebs), ]
which.max(degree(g))
graph <- graph.full(n=10)
only_odd_vertices <- which(V(graph)%%2==1)
length(only_odd_vertices)
seq <- V(graph)[2, 3, 7]
seq
seq <- seq[1, 3]    # filtering an existing vertex set
seq
V(g)[age < 30]$name
`%notin%` <- Negate(`%in%`)
V(g)$degree <- c("A", "B", "B+", "A+", "C", "A", "B")
V(g)$degree[degree(g) == 3]
V(g)$name[degree(g) == 3]
E(g)[.from(3)]
E(g)[.from("Carmina")]
E(g) [ 3:5 %--% 5:6 ]
V(g)$gender <- c("f", "m", "f", "m", "m", "f", "m")
men <- V(g)[gender == "m"]$name
men
women <- V(g)[gender == "f"]$name
women
E(g)[men %--% women]
get.adjacency(g)
layout <- layout_with_kk(g)
layout <- layout_as_tree(g, root = 2)
layout <- layout_with_kk(g)
plot(g, layout = layout, main = "Social network with the Kamada-Kawai layout algorithm")
plot(g, layout = layout_with_fr,
main = "Social network with the Fruchterman-Reingold layout algorithm")
V(g)$color <- ifelse(V(g)$gender == "m", "yellow", "red")
plot(g, layout = layout, vertex.label.dist = 3.5,
main = "Social network - with genders as colors")
plot(g, layout=layout, vertex.label.dist=3.5, vertex.color=as.factor(V(g)$gender))
plot(g, layout=layout, vertex.label.dist=3.5, vertex.size=20,
vertex.color=ifelse(V(g)$gender == "m", "yellow", "red"),
edge.width=ifelse(E(g)$is_formal, 5, 1))
library(readxl)
people<-read_xlsx("Networks.xlsx", sheet = "People")
relations<-read_xlsx("Networks.xlsx", sheet ="Relations")
g <- graph_from_data_frame(relations, directed=FALSE, vertices=people)
plot(g)
library(dplyr)
library(igraph)
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 0.8,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")
# install.packages("igraph")
library(igraph)
g <- make_empty_graph()
g <- make_graph(edges = c(1,2, 1,5), n=10, directed = FALSE)
g
summary(g)
g <- make_graph('Zachary')
plot(g)
g <- add_vertices(g, 3)
g <- add_edges(g, edges = c(1,35, 1,36, 34,37))
g <- g %>% add_edges(edges=c(1,34)) %>% add_vertices(3) %>%
add_edges(edges=c(38,39, 39,40, 40,38, 40,37))
g
plot(g)
get.edge.ids(g, c(1,34))
g <- delete_edges(g, 82)
g <- make_ring(10) %>% delete_edges("10|1")
plot(g)
g <- make_ring(5)
g <- delete_edges(g, get.edge.ids(g, c(1,5, 4,5)))
plot(g)
graph1 <- make_tree(127, 2, mode = "undirected")
summary(graph1)
plot(graph1)
graph2 <- make_tree(127, 2, mode = "undirected")
identical_graphs(graph1,graph2)
graph1 <- sample_grg(100, 0.2)
summary(graph1)
plot(graph1)
graph2 <- sample_grg(100, 0.2)
identical_graphs(graph1, graph2)
plot(graph2)
isomorphic(graph1, graph2)
g <- make_graph(~ Alice-Bob:Claire:Frank, Claire-Alice:Dennis:Frank:Esther,
George-Dennis:Frank, Dennis-Esther)
V(g)$age <- c(25, 31, 18, 23, 47, 22, 50)
V(g)$gender <- c("f", "m", "f", "m", "m", "f", "m")
E(g)$is_formal <- c(FALSE, FALSE, TRUE, TRUE, TRUE, FALSE, TRUE, FALSE, FALSE)
summary(g)
E(g)$is_formal
E(g)$is_formal[1] <- TRUE
E(g)$is_formal
g$date <- c("2022-02-11")
graph_attr(g, "date")
match(c("George"), V(g)$name)
V(g)$name[1:3] <- c("Alejandra", "Bruno", "Carmina")
V(g)
g <- delete_vertex_attr(g, "gender")
V(g)$gender
degree(g)
degree(g, 7)
degree(g, v=c(3,4,5))
degree(g, v=c("Carmina", "Frank", "Dennis"))
degree(g, "Bruno")
edge_betweenness(g)
ebs <- edge_betweenness(g)
as_edgelist(g)[ebs == max(ebs), ]
which.max(degree(g))
graph <- graph.full(n=10)
only_odd_vertices <- which(V(graph)%%2==1)
length(only_odd_vertices)
seq <- V(graph)[2, 3, 7]
seq
seq <- seq[1, 3]    # filtering an existing vertex set
seq
V(g)[age < 30]$name
`%notin%` <- Negate(`%in%`)
V(g)$degree <- c("A", "B", "B+", "A+", "C", "A", "B")
V(g)$degree[degree(g) == 3]
V(g)$name[degree(g) == 3]
E(g)[.from(3)]
E(g)[.from("Carmina")]
E(g) [ 3:5 %--% 5:6 ]
V(g)$gender <- c("f", "m", "f", "m", "m", "f", "m")
men <- V(g)[gender == "m"]$name
men
women <- V(g)[gender == "f"]$name
women
E(g)[men %--% women]
get.adjacency(g)
layout <- layout_with_kk(g)
layout <- layout_as_tree(g, root = 2)
layout <- layout_with_kk(g)
plot(g, layout = layout, main = "Social network with the Kamada-Kawai layout algorithm")
plot(g, layout = layout_with_fr,
main = "Social network with the Fruchterman-Reingold layout algorithm")
V(g)$color <- ifelse(V(g)$gender == "m", "yellow", "red")
plot(g, layout = layout, vertex.label.dist = 3.5,
main = "Social network - with genders as colors")
plot(g, layout=layout, vertex.label.dist=3.5, vertex.color=as.factor(V(g)$gender))
plot(g, layout=layout, vertex.label.dist=3.5, vertex.size=20,
vertex.color=ifelse(V(g)$gender == "m", "yellow", "red"),
edge.width=ifelse(E(g)$is_formal, 5, 1))
library(readxl)
people<-read_xlsx("Networks.xlsx", sheet = "People")
relations<-read_xlsx("Networks.xlsx", sheet ="Relations")
g <- graph_from_data_frame(relations, directed=FALSE, vertices=people)
plot(g)
library(dplyr)
library(igraph)
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 0.8,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")
library(dplyr)
library(igraph)
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 0.8,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")
library(dplyr)
library(igraph)
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 0.8,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
edgelist<- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
edgelist_df$BCB520<-"TRUE"
edgelist_df$Advisor<-"FALSE"
relations$BCB520 <- "FALSE"
relations3<-rbind(relations, edgelist_df)
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
plot(g,  layout = layout_with_fr)
library(dplyr)
library(igraph)
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 0.8,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
edgelist<- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
edgelist_df$BCB520<-"TRUE"
edgelist_df$Advisor<-"FALSE"
relations$BCB520 <- "FALSE"
relations3<-rbind(relations, edgelist_df)
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
plot(g,  layout = layout_with_kk)
library(dplyr)
library(igraph)
# Assign colors to edges based on 'Advisor' or 'BCB520' relationship
E(g)$color <- ifelse(E(g)$Advisor == "TRUE", "blue", "red")  # Example: blue for Advisor, red for BCB520
# Create a color palette for the departments
department_colors <- setNames(c("red", "cyan", "green", "yellow", "orange", "pink", "lightblue"), c("Biology", "EPPN", "FCS", "CNR", "FCS", "PlantSci", "Math"))
# Map the department of each vertex in the graph to the corresponding color
V(g)$color <- department_colors[people$department[match(V(g)$name, people$name)]]
plot(g,
layout = layout_with_kk(g),
vertex.color = V(g)$color,
vertex.size = 35, # Adjusts the size of the nodes. Increase or decrease as needed.
vertex.label.cex = 0.6,  # Adjusts the font size of the labels.
vertex.label.color = "black",  # Sets the label color to black.
vertex.label.font = 2)  # Sets the font style to bold.
# Adding a legend for departments manually
legend("topright",           # Position of the legend
legend = names(department_colors),  # Names of the departments
col = department_colors,            # Colors used for each department
pch = 20,                           # Type of point to use
cex = 0.8,                          # Font size of the legend text
title = "Department",               # Title of the legend
bty = "n")
BCB<-people%>%
filter(BCB520 == "TRUE")%>%
select(name, BCB520)
edgelist<- combn(BCB$name, 2)
edgelist_df <- as.data.frame(t(edgelist))
colnames(edgelist_df) <- c("from", "to")
edgelist_df$BCB520<-"TRUE"
edgelist_df$Advisor<-"FALSE"
relations$BCB520 <- "FALSE"
relations3<-rbind(relations, edgelist_df)
g <- graph_from_data_frame(relations3, directed=FALSE, vertices=people)
