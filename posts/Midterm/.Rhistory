system("git remote add origin <https://github.com/lripa/BCB520>")
https://github.com/lripa/BCB520
system("git remote add origin <https://github.com/lripa/BCB520>")
echo "# BCB520" >> README.md
echo "# BCB520" >> README.md
git init
git remote add origin https://github.com/lripa/BCB520.git
library(gh)
library(remotes)
library(askpass)
library(gitcreds)
git remote add origin https://github.com/lripa/BCB520.git
library(commonmark)
library(gert)
library(credentials)
git remote add origin https://github.com/lripa/BCB520.git
echo "# BCB520" >> README.md
library(readxl)
data4 <- read_excel("FMC_curculionids.xlsx", sheet = 1)
library(readxl)
data4 <- read_excel("FMC curculionids.xlsx", sheet = 1)
library(readxl)
data4 <- read_excel("FMC curculionids.xlsx", sheet = 1
library(readxl)
FMC_curculionids <- read_excel("Mi unidad/Uidaho/Clases/PhD/Spring 2024/BCB 520/Data/FMC curculionids.xlsx")
View(FMC_curculionids)
library(tidyverse)
glimpse
library(vroom)
library(stringr)
library(tidyverse)
library(readxl)
glimpse(FMC_curculionids)
library(agricolae)
install.packages("agricolae")
library(agricolae)
library(agricolae)
data= read.table(file = "FMC_curculionids", header = T)
data= read.table(file = "FMC_curculionids.xslx", header = T)
glimpse(FMC_curculionids)
data= read.table(file = "fileName.txt", header = T)
glimpse(FMC_curculionids)
library(tidyverse)
library(readxl)
Weevils <- read_excel("Mi unidad/Uidaho/Clases/PhD/Spring 2024/BCB 520/Data/Weevils.xlsx")
View(Weevils)
glimpse(Weevils)
The `echo: false` option disables the printing of code (only output is displayed). install.packages('devtools')
library(tidyverse)
library(readxl)
DOE<- read.csv("UIdoe.xlsx")
library(tidyverse)
library(readxl)
DOE <- read_xlsx("DOEawards.xlsx", .name_repair = "minimal")
library(tidyverse)
library(readxl)
library(dplyr)
DOE <- read_xlsx("DOEawards.xlsx")
DOEUI_General <- DOEawardsUI %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
library(tidyverse)
library(readxl)
library(dplyr)
DOE <- read_xlsx("DOEawards.xlsx")
DOEUI_General <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
library(tidyverse)
library(readxl)
library(dplyr)
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
library(tidyverse)
library(readxl)
library(dplyr)
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
knitr::kable(head(DOE_UI))
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse)
library(tidyverse)
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse)
library(tidyverse)
suppressPackageStartupMessages(library(readxl))
suppressPackageStartupMessages(library(dplyr))
suppressPackageStartupMessages(library(tidyverse)
library(tidyverse)
library(tidyverse)
library(readxl)
library(dplyr)
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
knitr::kable(head(DOE_UI))
library(tidyverse)
library(readxl)
library(dplyr)
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DO_UIFiltered <- DOE_UI %>%
select(Title, Institution, PI, Status, `Action Type`, `Program Office`, `Start Date`, `End Date`, `Most Recent Award Date`, `Amount Awarded to Date`)
knitr::kable(head(DOE_UIFiltered))
library(tidyverse)
library(readxl)
library(dplyr)
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DOE_UIFiltered <- DOE_UI %>%
select(Title, Institution, PI, Status, `Action Type`, `Program Office`, `Start Date`, `End Date`, `Most Recent Award Date`, `Amount Awarded to Date`)
knitr::kable(head(DOE_UIFiltered))
library(tidyverse)
library(readxl)
library(dplyr)
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DOE_UIFiltered <- DOE_UI %>%
select(Title, Institution, PI, Status,`Program Office`, `Start Date`, `End Date`, ``, `Amount Awarded to Date`)
library(tidyverse)
library(readxl)
library(dplyr)
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DOE_UIFiltered <- DOE_UI %>%
select(Title, Institution, PI, Status,`Program Office`, `Start Date`, `End Date`, `Amount Awarded to Date`)
knitr::kable(head(DOE_UIFiltered))
library(tidyverse)
library(readxl)
library(dplyr)
library(knitr)
# Wrap the code block in try() to suppress error messages
try({
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DOE_UIFiltered <- DOE_UI %>%
select(Title, Institution, PI, Status, `Program Office`, `Start Date`, `End Date`, `Amount Awarded to Date`)
# Display the table
knitr::kable(head(DOE_UIFiltered))
}, silent = TRUE)
)
library(tidyverse)
library(readxl)
library(dplyr)
library(knitr)
# Wrap the code block in try() to suppress error messages
try({
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DOE_UIFiltered <- DOE_UI %>%
select(Title, Institution, PI, Status, `Program Office`, `Start Date`, `End Date`, `Amount Awarded to Date`)
# Display the table
knitr::kable(head(DOE_UIFiltered))
}, silent = TRUE)
library(readxl)
library(dplyr)
library(tidyverse)
NIHUIAwardsActive <- read_xlsx("NIHUI_2.xlsx")
library(httr)
library(jsonlite)
library(dplyr)
library(knitr) # Ensure knitr is loaded for kable()
# Set the base URL for the API
base_url <- "https://api.reporter.nih.gov/v2/projects/search"
# Build query parameters
query_params <- list(
criteria = list(
fiscal_years = 2013:2024,
org_names = list("UNIVERSITY OF IDAHO", "BOISE STATE UNIVERSITY")
),
offset = 0,
limit = 500,
sort_field = "ProjectStartDate",
sort_order = "desc"
)
# Convert query parameters to JSON
query_json <- toJSON(query_params, auto_unbox = TRUE, pretty = TRUE)
# Set header information
headers <- c("Content-Type" = "application/json")
# Send POST request
response <- POST(base_url, body = query_json, encode = "json", add_headers(.headers = headers))
# Process response
if (status_code(response) == 200) {
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
projects_df <- parsed_data$results
# Filter and select specific columns from projects_df
projects_df_filtered <- projects_df %>%
select(Title, Institution, PI, Status, `Program Office`, `Start Date`, `End Date`, `Amount Awarded to Date`)
# Display the table using knitr::kable
knitr::kable(head(projects_df_filtered))
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
print(content(response, as = "text"))
}
library(httr)
library(jsonlite)
library(dplyr)
library(knitr) # Ensure knitr is loaded for kable()
# Set the base URL for the API
base_url <- "https://api.reporter.nih.gov/v2/projects/search"
# Build query parameters
query_params <- list(
criteria = list(
fiscal_years = 2013:2024,
org_names = list("UNIVERSITY OF IDAHO", "BOISE STATE UNIVERSITY")
),
offset = 0,
limit = 500,
sort_field = "ProjectStartDate",
sort_order = "desc"
)
# Convert query parameters to JSON
query_json <- toJSON(query_params, auto_unbox = TRUE, pretty = TRUE)
# Set header information
headers <- c("Content-Type" = "application/json")
# Send POST request
response <- POST(base_url, body = query_json, encode = "json", add_headers(.headers = headers))
# Process response
if (status_code(response) == 200) {
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
projects_df <- parsed_data$results
# Filter for "University of Idaho"
projects_UI <- projects_df %>%
filter(Institution == "UNIVERSITY OF IDAHO") # Ensure matching case or use tolower()/toupper() for case-insensitive matching
# Display the head of the filtered table
knitr::kable(head(projects_UI))
library(httr)
library(jsonlite)
library(dplyr)
library(knitr) # Ensure knitr is loaded for kable()
# Set the base URL for the API
base_url <- "https://api.reporter.nih.gov/v2/projects/search"
# Build query parameters
query_params <- list(
criteria = list(
fiscal_years = 2013:2024,
org_names = list("UNIVERSITY OF IDAHO", "BOISE STATE UNIVERSITY")
),
offset = 0,
limit = 500,
sort_field = "ProjectStartDate",
sort_order = "desc"
)
# Convert query parameters to JSON
query_json <- toJSON(query_params, auto_unbox = TRUE, pretty = TRUE)
# Set header information
headers <- c("Content-Type" = "application/json")
# Send POST request
response <- POST(base_url, body = query_json, encode = "json", add_headers(.headers = headers))
# Process response
if (status_code(response) == 200) {
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
projects_df <- parsed_data$results
# Filter for "University of Idaho"
projects_UI <- projects_df %>%
filter(Institution == "UNIVERSITY OF IDAHO") # Ensure matching case or use tolower()/toupper() for case-insensitive matching
# Display the head of the filtered table
knitr::kable(head(projects_UI))
library(httr)
library(jsonlite)
library(dplyr)
library(knitr) # Ensure knitr is loaded for kable()
library(writexl) # Load writexl for write_xlsx
# Your existing code to fetch and process the data...
if (status_code(response) == 200) {
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
projects_df <- parsed_data$results
# Specify the path and name of the Excel file you want to create
excel_file_path <- "NIH_Projects.xlsx"
# Write the projects_df data frame to an Excel file
write_xlsx(projects_df, excel_file_path)
View(projects_df)
View(parsed_data)
View(projects_df)
View(projects_df)
View(projects_df)
write.csv(titanic, file = "titanic_with_price.csv")
library(readxl)
library(dplyr)
library(tidyverse)
NIHUI_New_Awards_Specific <- projects_df %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
library(readxl)
library(dplyr)
library(tidyverse)
NIHUI_New_Awards_Specific <- projects_df %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
library(readxl)
library(dplyr)
library(tidyverse)
knitr::kable(head(projects_df))
library(readxl)
library(dplyr)
library(tidyverse)
NIHUIAwardsActive <- projects_df
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
View(projects_df)
View(projects_df[[10]][[1]])
library(readxl)
library(dplyr)
library(tidyverse)
NIHUIAwardsActive <- projects_df
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select('Project Title', 'Administering IC', 'Award Notice Date', `Opportunity Number`, `Project Number`, `Project Start Date`, `Project End Date`, `Budget Start Date`, `Budget End Date`, 'Total Cost', 'Total Cost (Sub Projects)', 'Funding IC(s)', 'Direct Cost IC', 'InDirect Cost IC', 'Total Cost IC')
library(readxl)
library(dplyr)
library(tidyverse)
NIHUIAwardsActive <- projects_df
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select('princpal_investigators')
library(readxl)
library(dplyr)
library(tidyverse)
NIHUIAwardsActive <- projects_df
NIHUI_New_Awards_Specific <- NIHUIAwardsActive %>%
select('princpal_investigators')
library(readxl)
library(dplyr)
library(tidyverse)
NIHUIAwardsActive <- projects_df
knitr::kable(head(NIHUI_New_Awards_Specific))
library(readxl)
library(dplyr)
library(tidyverse)
knitr::kable(head(projects_df))
library(tidyverse)
library(readxl)
library(dplyr)
library(knitr)
try({
DOE <- read_xlsx("DOEawards.xlsx")
DOE_UI <- DOE %>%
dplyr::filter(Institution == 'Regents of the University of Idaho')
DOE_UIFiltered <- DOE_UI %>%
select(Title, Institution, PI, Status, `Program Office`, `Start Date`, `End Date`, `Amount Awarded to Date`)
# Display the table
knitr::kable(head(DOE_UIFiltered))
}, silent = TRUE)
{r}
library(readxl)
library(dplyr)
library(tidyverse)
knitr::kable(head(projects_df))
library(tidyverse)
library(readxl)
library(knitr)
USDAUI  <- read.csv("USDAtoUI.csv")
knitr::kable(head(USDAUI))
library(tidyverse)
library(readxl)
library(knitr)
USDA_UI  <- read.csv("USDAtoUI.csv")
knitr::kable(head(USDA_UI))
library(readxl)
library(dplyr)
library(tidyverse)
NSFUIAwardsActive <- read_xlsx("NSFUI_2.xlsx")
library(readxl)
library(dplyr)
library(tidyverse)
NSFUIAwardsActive <- read_xlsx("UINSF.csv")
library(dplyr)
library(tidyverse)
NSFUIAwardsActive <- ("UINSF.csv")
# Selecting specific columns, ensure there are no leading or trailing spaces in column names
NSFUI_New_Awards_Specific <- NSFUIAwardsActive %>%
select(Title, NSFOrganization, StartDate, LastAmendmentDate, EndDate, AwardedAmountToDate)
library(readxl)
# Base URL for the API
base_url <- "https://www.research.gov/awardapi-service/v1/awards.json?awardeeName=%22regents+of+the+university+of+idaho%22"
printFields <- "rpp,offset,id,agency,awardeeCity,awardeeCountryCode,awardeeDistrictCode,awardeeName,awardeeStateCode,awardeeZipCode,cfdaNumber,coPDPI,date,startDate,expDate,estimatedTotalAmt,fundsObligatedAmt,ueiNumber,fundProgramName,parentUeiNumber,pdPIName,perfCity,perfCountryCode,perfDistrictCode,perfLocation,perfStateCode,perfZipCode,poName,primaryProgram,transType,title,awardee,poPhone,poEmail,awardeeAddress,perfAddress,publicationResearch,publicationConference,fundAgencyCode,awardAgencyCode,projectOutComesReport,abstractText,piFirstName,piMiddeInitial,piLastName,piEmail"
# Initialize an empty data frame to store results
NSFtoUI <- tibble()
# Number of results per page (as per API settings)
results_per_page <- 25
# Variable to keep track of the current page number
current_page <- 1
# Variable to control the loop
keep_going <- TRUE
while(keep_going) {
# Calculate the offset for the current page
offset <- (current_page - 1) * results_per_page + 1
# Construct the full URL with offset
url <- paste0(base_url, "&offset=", offset, "&printFields=", printFields)
# Make the API call
response <- GET(url)
# Check if the call was successful
if (status_code(response) == 200) {
# Extract and parse the JSON data
json_data <- content(response, type = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
# Extract the 'award' data and add to the all_awards data frame
awards_data <- parsed_data$response$award
NSFtoUI <- bind_rows(NSFtoUI, as_tibble(awards_data))
# Debug: Print the current page number and number of awards fetched
print(paste("Page:", current_page, "- Awards fetched:", length(awards_data$id)))
# Check if the current page has less than results_per_page awards, then it's the last page
if (length(awards_data$id) < results_per_page) {
keep_going <- FALSE
} else {
current_page <- current_page + 1
}
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
keep_going <- FALSE
}
}
library(readxl)
library(readxl)
library(dplyr)
library(tidyverse)
knitr::kable(head(NSFtoUI))
install.packages("writexl")
install.packages("writexl")
library(writexl)
# Specify the file path where you want to save the Excel file
excel_file_path <- "projects_df.xlsx"
# Write the data frame to the Excel file
write_xlsx(projects_df, excel_file_path)
# Optionally, print a message indicating the file has been saved
print(paste("Data successfully saved to:", excel_file_path))
library(httr)
library(jsonlite)
library(dplyr)
library(knitr) # Ensure knitr is loaded for kable()
library(writexl) # Load writexl for writing to Excel
# Set the base URL for the API
base_url <- "https://api.reporter.nih.gov/v2/projects/search"
# Build query parameters
query_params <- list(
criteria = list(
fiscal_years = 2013:2024,
org_names = list("UNIVERSITY OF IDAHO", "BOISE STATE UNIVERSITY")
),
offset = 0,
limit = 500,
sort_field = "ProjectStartDate",
sort_order = "desc"
)
# Convert query parameters to JSON
query_json <- toJSON(query_params, auto_unbox = TRUE, pretty = TRUE)
# Set header information
headers <- c("Content-Type" = "application/json")
# Send POST request
response <- POST(base_url, body = query_json, encode = "json", add_headers(.headers = headers))
# Process response
if (status_code(response) == 200) {
json_data <- content(response, as = "text", encoding = "UTF-8")
parsed_data <- fromJSON(json_data, flatten = TRUE)
projects_df <- parsed_data$results
# Specify the file path where you want to save the Excel file
excel_file_path <- "projects_df.xlsx"
# Write the data frame to the Excel file
write_xlsx(projects_df, excel_file_path)
# Optionally, print a message indicating the file has been saved
print(paste("Data successfully saved to:", excel_file_path))
} else {
print(paste("Failed to fetch data: Status code", status_code(response)))
print(content(response, as = "text"))
}
library(writexl)
# Specify the file path where you want to save the Excel file
excel_file_path <- "NSFtoUI.xlsx"
# Write the data frame to the Excel file
write_xlsx(NSFtoUI, excel_file_path)
# Optionally, print a message indicating the file has been saved
print(paste("Data successfully saved to:", excel_file_path))
install.packages("writexl")
library(writexl)
# Specify the file path where you want to save the Excel file
excel_file_path <- "projects_df.xlsx"
# Write the data frame to the Excel file
write_xlsx(projects_df, excel_file_path)
# Optionally, print a message indicating the file has been saved
print(paste("Data successfully saved to:", excel_file_path))
library(httr)
library(jsonlite)
library(dplyr)
library(knitr) # Ensure knitr is loaded for kable()
library(writexl) # Load writexl for writing to Excel
# Set the base URL for the API
base_url <- "https://api.reporter.nih.gov/v2/projects/search"
# Build query parameters
query_params <- list(
criteria = list(
fiscal_years = 2013:2024,
org_names = list("UNIVERSITY OF IDAHO", "BOISE STATE UNIVERSITY")
),
offset = 0,
limit = 500,
sort_field = "ProjectStartDate",
sort_order = "desc"
)
# Convert query parameters to JSON
query_json <- toJSON(query_params, auto_unbox = TRUE, pretty = TRUE)
# Set header information
headers <- c("Content-Type" = "application/json")
# Send POST request
response <- POST(base_url, body = query_json, encode = "json", add_headers(.headers = headers))
