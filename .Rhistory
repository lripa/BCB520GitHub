library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
world <- ne_countries(scale = "medium", returnclass = "sf")
world$centroid_lon <- st_coordinates(st_centroid(world$geometry))[, 1]
world$centroid_lat <- st_coordinates(st_centroid(world$geometry))[, 2]
participants_with_centroids <- participants %>%
left_join(world %>% select(name, centroid_lon, centroid_lat), by = c("Country" = "name"))
ggplot(data = participants_with_centroids) +
borders("world", colour = "gray", fill = "lightgray") + # Draw the base map
geom_point(aes(x = centroid_lon, y = centroid_lat, color = as.factor(Year), shape = as.factor(Year)), size = 2) + # Plot points with varying colors and shapes per Year
scale_color_viridis_d(name = "Year") + # Use a nice color scale for colors
scale_shape_manual(name = "Year", values = c(16, 17, 18, 19, 15, 8)) + # Manually set shapes, adjust values as needed based on the number of years
theme_minimal() +
labs(title = "Applicants by Country and Year", x = "Longitude", y = "Latitude", color = "Year", shape = "Year") +
theme(legend.position = "bottom")
# Assuming 'participants' has a 'Country' column
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n())
# Join with world data to include geometry
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Plot with a gradient fill based on the number of applicants
ggplot(data = world_with_applicants) +
geom_sf(aes(fill = Applicants), color = "white") +
scale_fill_viridis_c(name = "Number of Applicants", na.value = "lightgrey",
limits = c(1, 150), oob = scales::squish) +  # Set the range from 1 to 150
labs(title = "Global Distribution of Applicants") +
theme_minimal()
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
head(participants)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
head(participants)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
head(participants)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
head(participants)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
head(participants)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
head(participants)
library(dplyr)
library(sf)
library(rnaturalearth)
library(leaflet)
library(viridis)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n()) %>%
ungroup()
# Get world countries' spatial data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge applicants data with spatial data
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Define a color palette function based on the number of applicants
# This uses a continuous scale since we're dealing with counts
qpal <- colorNumeric(palette = "viridis", domain = world_with_applicants$Applicants, na.color = "lightgrey")
# Create the leaflet map
leaflet(world_with_applicants) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~qpal(Applicants),
color = "#2b2b2b",
fillOpacity = 0.7,
weight = 0.5,
popup = ~paste(name, "<br>", "Applicants: ", Applicants)) %>%
addLegend(pal = qpal, values = ~Applicants,
title = "Number of Applicants",
position = "bottomright") %>%
setView(lat = 0, lng = 0, zoom = 2)
library(plotly)
library(dplyr)
library(countrycode)
# Aggregating the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n()) %>%
ungroup()
# Adding ISO country codes to 'applicants_summary' for Plotly
applicants_summary$CODE <- countrycode(applicants_summary$Country, "country.name", "iso3c")
# Handling missing or incorrect country names
applicants_summary <- na.omit(applicants_summary)
# Specify map projection and options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'orthographic'),
resolution = '100',
showcountries = TRUE,
countrycolor = '#d1d1d1',
showocean = TRUE,
oceancolor = '#c9d2e0',
showlakes = TRUE,
lakecolor = '#99c0db',
showrivers = TRUE,
rivercolor = '#99c0db')
# Plotting with simplified trace
p <- plot_geo(applicants_summary, locations = ~CODE, text = ~paste(Country, '<br>Applicants: ', Applicants),
marker = list(size = ~sqrt(Applicants) * 10, color = ~Applicants, colorscale = 'Reds', line = list(color = "#d1d1d1", width = 0.5))) %>%
colorbar(title = 'Number of Applicants') %>%
layout(title = 'Number of Applicants Per Country', geo = g)
p
library(rnaturalearth)
library(ggplot2)
library(dplyr)
library(sf)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
world <- ne_countries(scale = "medium", returnclass = "sf")
world$centroid_lon <- st_coordinates(st_centroid(world$geometry))[, 1]
world$centroid_lat <- st_coordinates(st_centroid(world$geometry))[, 2]
participants_with_centroids <- participants %>%
left_join(world %>% select(name, centroid_lon, centroid_lat), by = c("Country" = "name"))
ggplot(data = participants_with_centroids) +
borders("world", colour = "gray", fill = "lightgray") + # Draw the base map
geom_point(aes(x = centroid_lon, y = centroid_lat, color = as.factor(Year), shape = as.factor(Year)), size = 2) + # Plot points with varying colors and shapes per Year
scale_color_viridis_d(name = "Year") + # Use a nice color scale for colors
scale_shape_manual(name = "Year", values = c(16, 17, 18, 19, 15, 8)) + # Manually set shapes, adjust values as needed based on the number of years
theme_minimal() +
labs(title = "Applicants by Country and Year", x = "Longitude", y = "Latitude", color = "Year", shape = "Year") +
theme(legend.position = "bottom")
# Assuming 'participants' has a 'Country' column
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n())
# Join with world data to include geometry
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Plot with a gradient fill based on the number of applicants
ggplot(data = world_with_applicants) +
geom_sf(aes(fill = Applicants), color = "white") +
scale_fill_viridis_c(name = "Number of Applicants", na.value = "lightgrey",
limits = c(1, 150), oob = scales::squish) +  # Set the range from 1 to 150
labs(title = "Global Distribution of Applicants") +
theme_minimal()
library(dplyr)
library(sf)
library(rnaturalearth)
library(leaflet)
library(viridis)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n()) %>%
ungroup()
# Get world countries' spatial data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge applicants data with spatial data
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Adjusting the domain for more sensitivity on lower counts
# Apply a logarithmic transformation to the Applicants data
# Adding 1 to avoid log(0) which is undefined
log_applicants <- log1p(world_with_applicants$Applicants)
# Define a color palette function with the adjusted domain
qpal <- colorNumeric(palette = "viridis", domain = log_applicants, na.color = "lightgrey")
# Create the leaflet map with the adjusted color scale
leaflet(world_with_applicants) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~qpal(log1p(Applicants)),  # Use log1p for fillColor mapping
color = "#2b2b2b",
fillOpacity = 0.7,
weight = 0.5,
popup = ~paste(name, "<br>", "Applicants: ", Applicants)) %>%
addLegend(pal = qpal, values = ~log1p(Applicants),  # Adjust legend values accordingly
title = "Number of Applicants (Log Scale)",
position = "bottomright") %>%
setView(lat = 0, lng = 0, zoom = 2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(leaflet)
library(viridis)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n()) %>%
ungroup()
# Get world countries' spatial data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge applicants data with spatial data
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Assuming the majority of your data points are in the lower range (e.g., 1-10),
# and you want to ensure these differences are visible, adjust the domain accordingly
# Here, we manually define the domain to ensure the lower counts are differentiated
min_applicants <- min(world_with_applicants$Applicants, na.rm = TRUE)
max_applicants <- max(world_with_applicants$Applicants, na.rm = TRUE)
# Define a color palette function based on the number of applicants
qpal <- colorNumeric(palette = "viridis", domain = c(min_applicants, max_applicants), na.color = "lightgrey")
# Create the leaflet map
leaflet(world_with_applicants) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~qpal(Applicants),
color = "#2b2b2b",
fillOpacity = 0.7,
weight = 0.5,
popup = ~paste(name, "<br>", "Applicants: ", Applicants)) %>%
addLegend(pal = qpal, values = ~Applicants,
title = "Number of Applicants",
position = "bottomright") %>%
setView(lat = 0, lng = 0, zoom = 2)
# Assuming 'participants' has a 'Country' column
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n())
# Assuming 'participants' has a 'Country' column
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n())
library(rnaturalearth)
library(ggplot2)
library(dplyr)
library(sf)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
world <- ne_countries(scale = "medium", returnclass = "sf")
world$centroid_lon <- st_coordinates(st_centroid(world$geometry))[, 1]
world$centroid_lat <- st_coordinates(st_centroid(world$geometry))[, 2]
participants_with_centroids <- participants %>%
left_join(world %>% select(name, centroid_lon, centroid_lat), by = c("Country" = "name"))
ggplot(data = participants_with_centroids) +
borders("world", colour = "gray", fill = "lightgray") + # Draw the base map
geom_point(aes(x = centroid_lon, y = centroid_lat, color = as.factor(Year), shape = as.factor(Year)), size = 2) + # Plot points with varying colors and shapes per Year
scale_color_viridis_d(name = "Year") + # Use a nice color scale for colors
scale_shape_manual(name = "Year", values = c(16, 17, 18, 19, 15, 8)) + # Manually set shapes, adjust values as needed based on the number of years
theme_minimal() +
labs(title = "Applicants by Country and Year", x = "Longitude", y = "Latitude", color = "Year", shape = "Year") +
theme(legend.position = "bottom")
# Assuming 'participants' has a 'Country' column
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n())
# Join with world data to include geometry
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Plot with a gradient fill based on the number of applicants
ggplot(data = world_with_applicants) +
geom_sf(aes(fill = Applicants), color = "white") +
scale_fill_viridis_c(name = "Number of Applicants", na.value = "lightgrey",
limits = c(1, 150), oob = scales::squish) +  # Set the range from 1 to 150
labs(title = "Global Distribution of Applicants") +
theme_minimal()
library(dplyr)
library(sf)
library(rnaturalearth)
library(leaflet)
library(viridis)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n()) %>%
ungroup()
# Get world countries' spatial data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge applicants data with spatial data
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Assuming the majority of your data points are in the lower range (e.g., 1-10),
# and you want to ensure these differences are visible, adjust the domain accordingly
# Here, we manually define the domain to ensure the lower counts are differentiated
min_applicants <- min(world_with_applicants$Applicants, na.rm = TRUE)
max_applicants <- max(world_with_applicants$Applicants, na.rm = TRUE)
# Define a color palette function based on the number of applicants
qpal <- colorNumeric(palette = "viridis", domain = c(min_applicants, max_applicants), na.color = "lightgrey")
# Create the leaflet map
leaflet(world_with_applicants) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~qpal(Applicants),
color = "#2b2b2b",
fillOpacity = 0.7,
weight = 0.5,
popup = ~paste(name, "<br>", "Applicants: ", Applicants)) %>%
addLegend(pal = qpal, values = ~Applicants,
title = "Number of Applicants",
position = "bottomright") %>%
setView(lat = 0, lng = 0, zoom = 2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(leaflet)
library(viridis)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n()) %>%
ungroup()
# Get world countries' spatial data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge applicants data with spatial data
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Assuming the majority of your data points are in the lower range (e.g., 1-10),
# and you want to ensure these differences are visible, adjust the domain accordingly
# Here, we manually define the domain to ensure the lower counts are differentiated
min_applicants <- min(world_with_applicants$Applicants, na.rm = TRUE)
max_applicants <- max(world_with_applicants$Applicants, na.rm = TRUE)
# Define a color palette function based on the number of applicants
qpal <- colorNumeric(palette = "viridis", domain = c(min_applicants, max_applicants), na.color = "lightgrey")
# Create the leaflet map
leaflet(world_with_applicants) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~qpal(Applicants),
color = "#2b2b2b",
fillOpacity = 0.7,
weight = 0.5,
popup = ~paste(name, "<br>", "Applicants: ", Applicants),
highlightOptions = highlightOptions(weight = 3,
color = "#666",
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend(pal = qpal, values = ~Applicants,
title = "Number of Applicants",
position = "bottomright") %>%
setView(lat = 0, lng = 0, zoom = 2)
library(dplyr)
library(sf)
library(rnaturalearth)
library(leaflet)
library(viridis)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n()) %>%
ungroup()
# Get world countries' spatial data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge applicants data with spatial data
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Assuming the majority of your data points are in the lower range (e.g., 1-10),
# and you want to ensure these differences are visible, adjust the domain accordingly
# Here, we manually define the domain to ensure the lower counts are differentiated
min_applicants <- min(world_with_applicants$Applicants, na.rm = TRUE)
max_applicants <- max(world_with_applicants$Applicants, na.rm = TRUE)
# Define a color palette function based on the number of applicants
qpal <- colorNumeric(palette = "viridis", domain = c(min_applicants, max_applicants), na.color = "lightgrey")
# Create the leaflet map with enhanced highlight functionality
leaflet(world_with_applicants) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~qpal(Applicants),
color = "#2b2b2b",  # Default outline color
fillOpacity = 0.7,
weight = 0.5,  # Default outline weight
popup = ~paste(name, "<br>", "Applicants: ", Applicants),
highlightOptions = highlightOptions(weight = 5,  # Thicker outline when highlighted
color = "#FFFF00",  # Bright yellow outline when highlighted
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend(pal = qpal, values = ~Applicants,
title = "Number of Applicants",
position = "bottomright") %>%
setView(lat = 0, lng = 0, zoom = 2)
library(readxl)
library(dplyr)
library(knitr)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
knitr::kable(head(participants))
library(rnaturalearth)
library(ggplot2)
library(dplyr)
library(sf)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
world <- ne_countries(scale = "medium", returnclass = "sf")
world$centroid_lon <- st_coordinates(st_centroid(world$geometry))[, 1]
world$centroid_lat <- st_coordinates(st_centroid(world$geometry))[, 2]
participants_with_centroids <- participants %>%
left_join(world %>% select(name, centroid_lon, centroid_lat), by = c("Country" = "name"))
ggplot(data = participants_with_centroids) +
borders("world", colour = "gray", fill = "lightgray") + # Draw the base map
geom_point(aes(x = centroid_lon, y = centroid_lat, color = as.factor(Year), shape = as.factor(Year)), size = 2) + # Plot points with varying colors and shapes per Year
scale_color_viridis_d(name = "Year") + # Use a nice color scale for colors
scale_shape_manual(name = "Year", values = c(16, 17, 18, 19, 15, 8)) + # Manually set shapes, adjust values as needed based on the number of years
theme_minimal() +
labs(title = "Applicants by Country and Year", x = "Longitude", y = "Latitude", color = "Year", shape = "Year") +
theme(legend.position = "bottom")
library(readxl)
library(dplyr)
library(knitr)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
knitr::kable(head(participants))
library(rnaturalearth)
library(ggplot2)
library(dplyr)
library(sf)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
world <- ne_countries(scale = "medium", returnclass = "sf")
world$centroid_lon <- st_coordinates(st_centroid(world$geometry))[, 1]
world$centroid_lat <- st_coordinates(st_centroid(world$geometry))[, 2]
participants_with_centroids <- participants %>%
left_join(world %>% select(name, centroid_lon, centroid_lat), by = c("Country" = "name"))
ggplot(data = participants_with_centroids) +
borders("world", colour = "gray", fill = "lightgray") + # Draw the base map
geom_point(aes(x = centroid_lon, y = centroid_lat, color = as.factor(Year), shape = as.factor(Year)), size = 2) + # Plot points with varying colors and shapes per Year
scale_color_viridis_d(name = "Year") + # Use a nice color scale for colors
scale_shape_manual(name = "Year", values = c(16, 17, 18, 19, 15, 8, 10)) + # Manually set shapes, adjust values as needed based on the number of years
theme_minimal() +
labs(title = "Applicants by Country and Year", x = "Longitude", y = "Latitude", color = "Year", shape = "Year") +
theme(legend.position = "bottom")
# Assuming 'participants' has a 'Country' column
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n())
# Join with world data to include geometry
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Plot with a gradient fill based on the number of applicants
ggplot(data = world_with_applicants) +
geom_sf(aes(fill = Applicants), color = "white") +
scale_fill_viridis_c(name = "Number of Applicants", na.value = "lightgrey",
limits = c(1, 150), oob = scales::squish) +  # Set the range from 1 to 150
labs(title = "Global Distribution of Applicants") +
theme_minimal()
library(dplyr)
library(sf)
library(rnaturalearth)
library(leaflet)
library(viridis)
library(readxl)
participants <- readxl::read_excel("BVBD Applicants Merged.xlsx")
# Count the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n()) %>%
ungroup()
# Get world countries' spatial data
world <- ne_countries(scale = "medium", returnclass = "sf")
# Merge applicants data with spatial data
world_with_applicants <- world %>%
left_join(applicants_summary, by = c("name" = "Country"))
# Assuming the majority of your data points are in the lower range (e.g., 1-10),
# and you want to ensure these differences are visible, adjust the domain accordingly
# Here, we manually define the domain to ensure the lower counts are differentiated
min_applicants <- min(world_with_applicants$Applicants, na.rm = TRUE)
max_applicants <- max(world_with_applicants$Applicants, na.rm = TRUE)
# Define a color palette function based on the number of applicants
qpal <- colorNumeric(palette = "viridis", domain = c(min_applicants, max_applicants), na.color = "lightgrey")
# Create the leaflet map with enhanced highlight functionality
leaflet(world_with_applicants) %>%
addProviderTiles(providers$CartoDB.Positron) %>%
addPolygons(fillColor = ~qpal(Applicants),
color = "#2b2b2b",  # Default outline color
fillOpacity = 0.7,
weight = 0.5,  # Default outline weight
popup = ~paste(name, "<br>", "Applicants: ", Applicants),
highlightOptions = highlightOptions(weight = 5,  # Thicker outline when highlighted
color = "#FFFF00",  # Bright yellow outline when highlighted
fillOpacity = 0.7,
bringToFront = TRUE)) %>%
addLegend(pal = qpal, values = ~Applicants,
title = "Number of Applicants",
position = "bottomright") %>%
setView(lat = 0, lng = 0, zoom = 2)
library(plotly)
library(dplyr)
library(countrycode)
# Aggregating the number of applicants per country
applicants_summary <- participants %>%
group_by(Country) %>%
summarise(Applicants = n()) %>%
ungroup()
# Adding ISO country codes to 'applicants_summary' for Plotly
applicants_summary$CODE <- countrycode(applicants_summary$Country, "country.name", "iso3c")
# Handling missing or incorrect country names
applicants_summary <- na.omit(applicants_summary)
# Specify map projection and options
g <- list(
showframe = FALSE,
showcoastlines = FALSE,
projection = list(type = 'orthographic'),
resolution = '100',
showcountries = TRUE,
countrycolor = '#d1d1d1',
showocean = TRUE,
oceancolor = '#c9d2e0',
showlakes = TRUE,
lakecolor = '#99c0db',
showrivers = TRUE,
rivercolor = '#99c0db')
# Plotting with simplified trace
p <- plot_geo(applicants_summary, locations = ~CODE, text = ~paste(Country, '<br>Applicants: ', Applicants),
marker = list(size = ~sqrt(Applicants) * 2, color = ~Applicants, colorscale = 'Reds', line = list(color = "#d1d1d1", width = 0.5))) %>%
colorbar(title = 'Number of Applicants') %>%
layout(title = 'Number of Applicants Per Country', geo = g)
p
