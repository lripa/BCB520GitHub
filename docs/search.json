[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "Welcome to Lucas’ GitHub!",
    "section": "",
    "text": "Hi, welcome to Lucas Ripa’s GitHub.\nI’m an agricultural engineer from Chile who came to the US to pursue an MSc in entomology and made the decision to continue pursuing a PhD in entomology. I guess I like insects… My goal is to improve agricultural practices, finding ways to reduce inputs and maximize yields (lowering pests populations)."
  },
  {
    "objectID": "posts/MarksChannels/index.html",
    "href": "posts/MarksChannels/index.html",
    "title": "“ASSIGNMENT 4”",
    "section": "",
    "text": "Code\nlibrary(readxl)\nWeevils &lt;- read_excel(\"~/Mi unidad/Uidaho/Clases/PhD/Spring 2024/BCB 520/Data/Weevils.xlsx\")\nhead(Weevils)\n\n\n# A tibble: 6 × 9\n  Treatment Replicate `Insecticide Name` Before `7 dpa` `14 dpa` `21 dpa`\n      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1         0         1 Control                11       3        5        2\n2         0         2 Control                 4       4        4        3\n3         0         3 Control                16       6        7        3\n4         0         4 Control                 5       3        1        3\n5         0         5 Control                10       6        7        4\n6         0         6 Control                 2       5        2        4\n# ℹ 2 more variables: `28 dpa` &lt;dbl&gt;, `35 dpa` &lt;dbl&gt;\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nBmeans &lt;-Weevils %&gt;%\n  group_by(`Insecticide Name`) %&gt;%\n  summarise(AVG = mean(Before),\n            AVG1 = mean(`7 dpa`, na.rm = TRUE), AVG2 = mean(`14 dpa`, na.rm = TRUE), AVG3 = mean(`21 dpa`, na.rm = TRUE), AVG4 = mean(`28 dpa`, na.rm = TRUE), AVG5 = mean(`35 dpa`, na.rm = TRUE) )\nlibrary(ggplot2)\n\n\n\n\n\nThis figure uses different colors to make clear the difference between treatments. As the concentration of the experimental sample increases, the hue of the blue color increases as well making sense (to me).\n\n\n\n\n\nCode\nlibrary(tidyverse)\nBmeans &lt;-Weevils %&gt;%\n  group_by(`Insecticide Name`) %&gt;%\n  summarise(AVG = mean(Before),\n            AVG1 = mean(`7 dpa`, na.rm = TRUE), AVG2 = mean(`14 dpa`, na.rm = TRUE), AVG3 = mean(`21 dpa`, na.rm = TRUE), AVG4 = mean(`28 dpa`, na.rm = TRUE), AVG5 = mean(`35 dpa`, na.rm = TRUE) )\nlibrary(ggplot2)\nmy_colors &lt;- c(\"green\", \"cyan\", \"blue\", \"darkblue\", \"gold\", \"black\")\n\nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG, fill = `Insecticide Name`)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = my_colors) +\n  labs(title = \"Mean weevils per plant before treatments\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))\n\n\n\n\n\n\n\n\nThis figure violates the channel correct use, since it uses the same color for every treatment, still is possible to understand what is going on but it takes significantly more time.\n\n\nCode\nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG)) +\n  geom_bar(stat = \"identity\", fill = \"black\") +\n  labs(title = \"Mean weevils per plant before treatments\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))"
  },
  {
    "objectID": "posts/MarksChannels/index.html#section",
    "href": "posts/MarksChannels/index.html#section",
    "title": "“ASSIGNMENT 4”",
    "section": "",
    "text": "Code\nlibrary(readxl)\nWeevils &lt;- read_excel(\"~/Mi unidad/Uidaho/Clases/PhD/Spring 2024/BCB 520/Data/Weevils.xlsx\")\nhead(Weevils)\n\n\n# A tibble: 6 × 9\n  Treatment Replicate `Insecticide Name` Before `7 dpa` `14 dpa` `21 dpa`\n      &lt;dbl&gt;     &lt;dbl&gt; &lt;chr&gt;               &lt;dbl&gt;   &lt;dbl&gt;    &lt;dbl&gt;    &lt;dbl&gt;\n1         0         1 Control                11       3        5        2\n2         0         2 Control                 4       4        4        3\n3         0         3 Control                16       6        7        3\n4         0         4 Control                 5       3        1        3\n5         0         5 Control                10       6        7        4\n6         0         6 Control                 2       5        2        4\n# ℹ 2 more variables: `28 dpa` &lt;dbl&gt;, `35 dpa` &lt;dbl&gt;\n\n\nCode\nlibrary(tidyverse)\n\n\nWarning: package 'readr' was built under R version 4.2.3\n\n\nWarning: package 'dplyr' was built under R version 4.2.3\n\n\nWarning: package 'stringr' was built under R version 4.2.3\n\n\n── Attaching core tidyverse packages ──────────────────────── tidyverse 2.0.0 ──\n✔ dplyr     1.1.4     ✔ readr     2.1.5\n✔ forcats   1.0.0     ✔ stringr   1.5.1\n✔ ggplot2   3.4.4     ✔ tibble    3.2.1\n✔ lubridate 1.9.3     ✔ tidyr     1.3.0\n✔ purrr     1.0.2     \n── Conflicts ────────────────────────────────────────── tidyverse_conflicts() ──\n✖ dplyr::filter() masks stats::filter()\n✖ dplyr::lag()    masks stats::lag()\nℹ Use the conflicted package (&lt;http://conflicted.r-lib.org/&gt;) to force all conflicts to become errors\n\n\nCode\nBmeans &lt;-Weevils %&gt;%\n  group_by(`Insecticide Name`) %&gt;%\n  summarise(AVG = mean(Before),\n            AVG1 = mean(`7 dpa`, na.rm = TRUE), AVG2 = mean(`14 dpa`, na.rm = TRUE), AVG3 = mean(`21 dpa`, na.rm = TRUE), AVG4 = mean(`28 dpa`, na.rm = TRUE), AVG5 = mean(`35 dpa`, na.rm = TRUE) )\nlibrary(ggplot2)"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-1",
    "href": "posts/MarksChannels/index.html#figure-1",
    "title": "“ASSIGNMENT 4”",
    "section": "",
    "text": "This figure uses different colors to make clear the difference between treatments. As the concentration of the experimental sample increases, the hue of the blue color increases as well making sense (to me)."
  },
  {
    "objectID": "posts/MarksChannels/index.html#section-1",
    "href": "posts/MarksChannels/index.html#section-1",
    "title": "“ASSIGNMENT 4”",
    "section": "",
    "text": "Code\nlibrary(tidyverse)\nBmeans &lt;-Weevils %&gt;%\n  group_by(`Insecticide Name`) %&gt;%\n  summarise(AVG = mean(Before),\n            AVG1 = mean(`7 dpa`, na.rm = TRUE), AVG2 = mean(`14 dpa`, na.rm = TRUE), AVG3 = mean(`21 dpa`, na.rm = TRUE), AVG4 = mean(`28 dpa`, na.rm = TRUE), AVG5 = mean(`35 dpa`, na.rm = TRUE) )\nlibrary(ggplot2)\nmy_colors &lt;- c(\"green\", \"cyan\", \"blue\", \"darkblue\", \"gold\", \"black\")\n\nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG, fill = `Insecticide Name`)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_manual(values = my_colors) +\n  labs(title = \"Mean weevils per plant before treatments\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-2",
    "href": "posts/MarksChannels/index.html#figure-2",
    "title": "“ASSIGNMENT 4”",
    "section": "",
    "text": "This figure violates the channel correct use, since it uses the same color for every treatment, still is possible to understand what is going on but it takes significantly more time.\n\n\nCode\nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG)) +\n  geom_bar(stat = \"identity\", fill = \"black\") +\n  labs(title = \"Mean weevils per plant before treatments\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-3",
    "href": "posts/MarksChannels/index.html#figure-3",
    "title": "“ASSIGNMENT 4”",
    "section": "Figure 3",
    "text": "Figure 3\nThis figure uses different colors and marks (dots) to make clear the difference between treatments.\n\n\nCode\nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG5, group = 1, color = `Insecticide Name`)) +\n  geom_line() +\n  geom_point() + # Adds points to the line graph for clarity\n  scale_color_manual(values = my_colors) +\n  labs(title = \"Mean weevils per plant 35 DPA\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-4",
    "href": "posts/MarksChannels/index.html#figure-4",
    "title": "“ASSIGNMENT 4”",
    "section": "Figure 4",
    "text": "Figure 4\nA thick line, no color difference, no marks in between treatments, makes difficult to separate them. Same channel for everything.\n\n\nCode\nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG5, group = 1)) +\n  geom_line(size = 30, color = \"black\") \n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\n\n\n\nCode\n  labs(title = \"Mean weevils per plant 35 DPA\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))\n\n\nNULL"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-5",
    "href": "posts/MarksChannels/index.html#figure-5",
    "title": "“ASSIGNMENT 4”",
    "section": "Figure 5",
    "text": "Figure 5\nStandard Error of the Mean (SEM), and bars for each treatment are presented using different channels. They are easily distinguishable between each other.\n\n\nCode\nlibrary(tidyverse)\nBmeans &lt;- Weevils %&gt;%\n  group_by(`Insecticide Name`) %&gt;%\n  summarise(AVG = mean(Before),\n            AVG1 = mean(`7 dpa`, na.rm = TRUE),\n            AVG2 = mean(`14 dpa`, na.rm = TRUE),\n            AVG3 = mean(`21 dpa`, na.rm = TRUE),\n            AVG4 = mean(`28 dpa`, na.rm = TRUE),\n            AVG5 = mean(`35 dpa`, na.rm = TRUE),\n            SD_14dpa = sd(`14 dpa`, na.rm = TRUE), \n            N_14dpa = sum(!is.na(`14 dpa`))) %&gt;% \n  mutate(SEM_14dpa = SD_14dpa / sqrt(N_14dpa)) \nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG2, fill = `Insecticide Name`)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = AVG2 - SEM_14dpa, ymax = AVG2 + SEM_14dpa), width = 0.2) +\n  scale_fill_manual(values = my_colors) +\n  labs(title = \"Mean weevils per plant at 14 dpa\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-6",
    "href": "posts/MarksChannels/index.html#figure-6",
    "title": "“ASSIGNMENT 4”",
    "section": "Figure 6",
    "text": "Figure 6\nStandard Error of the Mean (SEM), and bars for each treatment shares the same channels. They are hardly distinguishable between each other.\n\n\nCode\nlibrary(tidyverse)\nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG2, fill = `Insecticide Name`)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = AVG2 - SEM_14dpa, ymax = AVG2 + SEM_14dpa, color = `Insecticide Name`), \n                width = 1, size = 3) +\n  scale_fill_manual(values = my_colors) +\n  scale_color_manual(values = my_colors) + \n  labs(title = \"Mean weevils per plant at 14 dpa\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-7",
    "href": "posts/MarksChannels/index.html#figure-7",
    "title": "“ASSIGNMENT 4”",
    "section": "Figure 7",
    "text": "Figure 7\nAs we compare the insecticide treatments with the control, this figure clearly depicts the differences between them and the control, using different channels,\n\n\nCode\nlibrary(tidyverse)\n\nBmeans &lt;- Weevils %&gt;%\n  group_by(`Insecticide Name`) %&gt;%\n  summarise(AVG = mean(Before),\n            AVG1 = mean(`7 dpa`, na.rm = TRUE),\n            AVG2 = mean(`14 dpa`, na.rm = TRUE),\n            AVG3 = mean(`21 dpa`, na.rm = TRUE),\n            AVG4 = mean(`28 dpa`, na.rm = TRUE),\n            AVG5 = mean(`35 dpa`, na.rm = TRUE),\n            SD_35dpa = sd(`35 dpa`, na.rm = TRUE),  # Calculate SD for 35 dpa\n            N_35dpa = sum(!is.na(`35 dpa`))) %&gt;%  # Count non-NA values for 35 dpa\n  mutate(SEM_35dpa = SD_35dpa / sqrt(N_35dpa))  # Calculate SEM for 35 dpa\n\n# Assuming my_colors is already defined\nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG5, fill = `Insecticide Name`)) +\n  geom_bar(stat = \"identity\") +\n  geom_errorbar(aes(ymin = AVG5 - SEM_35dpa, ymax = AVG5 + SEM_35dpa), width = 0.2) +\n  scale_fill_manual(values = my_colors) +\n  labs(title = \"Mean weevils per plant at 35 dpa\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))"
  },
  {
    "objectID": "posts/MarksChannels/index.html#figure-8",
    "href": "posts/MarksChannels/index.html#figure-8",
    "title": "“ASSIGNMENT 4”",
    "section": "Figure 8",
    "text": "Figure 8\nHere, I’m using the same data at 35 dpa, but the scale of the Y-axis is incorrect. The same channels are used for everything without any markers for separability, resulting in an awful graph.\n\n\nCode\nggplot(Bmeans, aes(x = `Insecticide Name`, y = AVG5, group = 1)) +\n  geom_line(size = 15, color = \"black\") +  # Adjust line size to a reasonable value\n  scale_y_continuous(limits = c(NA, 50)) + # Set the upper limit of y-axis to 50\n  labs(title = \"Mean weevils per plant 35 DPA\",\n       x = \"Insecticides\",\n       y = \"Mean weevils/Plant\") +\n  theme(axis.text.x = element_text(angle = 10, vjust = 0.5, hjust = 1))"
  },
  {
    "objectID": "posts/Winter Sports/index.html",
    "href": "posts/Winter Sports/index.html",
    "title": "Hockey DataViz (A5)",
    "section": "",
    "text": "Demonstrate that you can manipulate tabular data to facilitate different visualization tasks. The minimum skills are FILTERING, SELECTING, and SUMMARIZING, all while GROUPING these operations as dictated by your data.\nDemonstrate that you can use tabular data to explore, analyze, and choose the most appropriate visualization idioms given a specific motivating question.\nDemonstrate that you can Find, Access, and Integrate additional data in order to fully address the motivating question."
  },
  {
    "objectID": "posts/Winter Sports/index.html#learning-objectives",
    "href": "posts/Winter Sports/index.html#learning-objectives",
    "title": "Hockey DataViz (A5)",
    "section": "",
    "text": "Demonstrate that you can manipulate tabular data to facilitate different visualization tasks. The minimum skills are FILTERING, SELECTING, and SUMMARIZING, all while GROUPING these operations as dictated by your data.\nDemonstrate that you can use tabular data to explore, analyze, and choose the most appropriate visualization idioms given a specific motivating question.\nDemonstrate that you can Find, Access, and Integrate additional data in order to fully address the motivating question."
  },
  {
    "objectID": "posts/Winter Sports/index.html#scenario",
    "href": "posts/Winter Sports/index.html#scenario",
    "title": "Hockey DataViz (A5)",
    "section": "SCENARIO",
    "text": "SCENARIO\nFor the purposes of this exercise, let’s set the 2024 NHL draft order using the Tankathon Simulator. The NHL uses a lottery system in which the teams lowest in the standings have the highest odds of getting the first overall pick. This year the Canucks are at the top of the league, and positioned to have the 31st overall pick. According to the simulator, Calgary will pick at number 2 (which is very valuable!), and the Canuck’s pick at 31.\nHere is the question:\nWas the trade worth it? This trade has a high likelihood of becoming what we call a rental. Elias Lindholm is on an expiring contract, meaning Vancouver is guaranteed to hold his contract only through the end of the season. They might be able to extend him, but that depends on the salary cap.\nMeanwhile, Calgary can draft a player at position 31, who may or may not turn out to be of equal or greater value than Lindholm.\nWas the trade worth it? Did Vancouver or Calgary “win” the trade?\nCan we make some visualizations that help us answer this question?"
  },
  {
    "objectID": "posts/Winter Sports/index.html#the-data",
    "href": "posts/Winter Sports/index.html#the-data",
    "title": "Hockey DataViz (A5)",
    "section": "THE DATA",
    "text": "THE DATA\nHow can we evaluate whether trading a first round pick for a rental player is a good idea? One approach is to look at the historical performance of players from various draft positions.\n\nCodeNHLDraft&lt;-read.csv(\"NHLDraft.csv\")\nNHLDictionary&lt;-read_excel(\"NHLDictionary.xlsx\")\nhead(NHLDraft)\n\n  X draftyear      name round overall pickinRound height weight position\n1 1      2001 Drew Fata     3      86          23     73    209  Defense\n2 2      2001 Drew Fata     3      86          23     73    209  Defense\n3 3      2001 Drew Fata     3      86          23     73    209  Defense\n4 4      2001 Drew Fata     3      86          23     73    209  Defense\n5 5      2001 Drew Fata     3      86          23     73    209  Defense\n6 6      2001 Drew Fata     3      86          23     73    209  Defense\n  playerId postdraft NHLgames\n1  8469535         0        0\n2  8469535         1        0\n3  8469535         2        0\n4  8469535         4        0\n5  8469535         5        3\n6  8469535        10        0\n\nCodeknitr::kable(NHLDictionary)\n\n\n\n\n\n\n\n\nAttribute\nType\nDescription\n\n\n\ndraftyear\nOrdinal\nCalendar year in which the player was drafted into the NHL.\n\n\nname\nItem\nFull name of the player.\n\n\nround\nOrdinal\nRound in which the player was drafted (1 to 7).\n\n\noverall\nOrdinal\nOverall draft position of the player (1 to 224)\n\n\npickinRound\nOrdinal\nPosition in which the player was drafted in their round (1 to 32).\n\n\nheight\nQuantitative\nPlayer height in inches.\n\n\nweight\nQuantitative\nPlayer weight in pounds.\n\n\nposition\nCategorical\nPlayer position (Forward, Defense, Goaltender)\n\n\nplayerId\nItem\nUnique ID (key) assigned to each player.\n\n\npostdraft\nOrdinal\nNumber of seasons since being drafted (0 to 20).\n\n\nNHLgames\nQuantitative\nNumber of games played in the NHL in that particular season (regular season is 82 games, playoffs are up to 28 more).\n\n\n\n\n\nIn this case, we have a dataframe with all the drafted players from 2000-2018, their position, their draft year and position, and then rows for each season since being drafted (postdraft). The key variable here is NHLgames, which tells us how many games they played in the NHL each season since being drafted. Whether drafted players even make the NHL, and how many games they play, might be a good proxy to understand the value of a draft pick we just traded away."
  },
  {
    "objectID": "posts/Winter Sports/index.html#simple-scatterplot",
    "href": "posts/Winter Sports/index.html#simple-scatterplot",
    "title": "Hockey DataViz (A5)",
    "section": "SIMPLE SCATTERPLOT",
    "text": "SIMPLE SCATTERPLOT\nOne thing to realize about professional hockey is that it is pretty rare for a player to play in the NHL right after being drafted. Players get drafted when they are 18 years old, and they usually play in the juniors, minor leagues, or the NCAA for a bit to further develop.\nLet’s use a scatterplot to visualize this phenomenon with the most recent draft classes.\n\nCodedraft2022&lt;-NHLDraft%&gt;%\n  filter(draftyear==2022 & postdraft==0)\n\n\n\n\nggplot(draft2022, aes(x=round, y=NHLgames))+\n  geom_point()\n\n\n\n\nAs you can see, the players drafted in June of 2022 didn’t play much last season. There are few things wrong with this visualization, however:\n\n\nOverplotting. All those points on the y=0 line represent about 32 players each. Can you think of a way that adding extra channels might help? Violin plots could work or jitter plots (see examples below). Also colors will help to separate.\n\n\n\nCodelibrary(ggplot2)\n\n# Assuming draft2022 has the variables round, NHLgames, and player_count\nggplot(draft2022, aes(x=factor(round), y=NHLgames, fill=factor(round))) +\n  geom_violin(trim=FALSE) +\n  labs(title = \"Distribution of NHL Games by Draft Round\",\n       x = \"Draft Round\",\n       y = \"NHL Games\") +\n  theme_light() +\n  scale_fill_brewer(palette=\"Pastel1\") + \n  theme(axis.text.x = element_text(angle=45, hjust=1))\n\n\n\nCodelibrary(ggplot2)\n\nggplot(draft2022, aes(x=factor(round), y=NHLgames, color=factor(round))) +\n  geom_jitter(width = 0.2, height = 0, alpha=0.5) +\n  labs(title = \"NHL Games by Draft Round (Jitter Plot)\",\n       x = \"Draft Round\",\n       y = \"NHL Games\") +\n  theme_light() +\n  scale_color_brewer(palette=\"Set3\") + \n  theme(axis.text.x = element_text(angle=45, hjust=1)) \n\n\n\n\n\n\nLabelling. Can we create a solid figure caption and better axis labels for this figure? In your caption, please specify the task(s) the visualizaiton is intended to facilitate, as well as the marks, channels, and key-value pairs used. Y axis label: Number of NHL games played, X: Draft Round, channels color and shape\n\nCodelibrary(ggplot2)\n\nggplot(draft2022, aes(x=factor(round), y=NHLgames, color=factor(round), shape=factor(round))) +\n  geom_jitter(width = 0.2, height = 0) +\n  labs(title = \"NHL Games by Draft Round (Jitter Plot)\",\n       x = \"Draft Round Number\",\n       y = \"Number of NHL games played\") +\n  theme_light() +\n  scale_color_brewer(palette=\"Set3\") +\n  scale_shape_manual(values=c(1:25)) + # Manually specify shapes if needed\n  theme(axis.text.x = element_text(angle=45, hjust=1))\n\n\n\n\n\nKey-Value pairs: Looks like we are using “round” as a continuous variable. Can we change this to an ordered factor?"
  },
  {
    "objectID": "posts/Winter Sports/index.html#expanded-scatterplot",
    "href": "posts/Winter Sports/index.html#expanded-scatterplot",
    "title": "Hockey DataViz (A5)",
    "section": "EXPANDED SCATTERPLOT",
    "text": "EXPANDED SCATTERPLOT\nThe data from the most recent drafts aren’t really helpful for our question. Let’s go back in time and use a draft year that has had some time to develop and reach their potential. How about 2018?\n\nCodedraft2018&lt;-NHLDraft%&gt;%\n  filter(draftyear==2018 & postdraft&lt;6) \n\n# wondering why I've filtered postdraft to be less than 6?  Try removing that filter to see what happens.\n\nggplot(draft2018, aes(x=round, y=NHLgames))+\n  geom_point()\n\n\n\n\nHmmm… in addition to the problem of overplotting, we’ve got an additional issue here. We actually have two keys and one attribute. The attribute is NHLgames, and the keys are round and postdraft, but we are only using round.\nPostdraft indicates the number of seasons after being drafted. We have several choices here. We can make a visualization that uses both keys, or we can somehow summarize the data for one of the keys.\nFor example, let’s say we just wanted to know the TOTAL number of NHL games played since being drafted.\n\nCodedrafttot2018&lt;- draft2018%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n`summarise()` has grouped output by 'playerId', 'round', 'overall', 'position'.\nYou can override using the `.groups` argument.\n\nCodeggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()\n\n\n\n\nLook closely at the two graphs above. How are they different?"
  },
  {
    "objectID": "posts/Winter Sports/index.html#stop-and-reflect",
    "href": "posts/Winter Sports/index.html#stop-and-reflect",
    "title": "Hockey DataViz (A5)",
    "section": "STOP AND REFLECT",
    "text": "STOP AND REFLECT\nI’ve been a bit sneaky up to this point. You’ve probably been focusing primarily on my (crappy) visualizations. That’s fine, but let’s think about the manipulations to the TABULAR DATA I’ve had to perform.\nI’m using the Tidyverse to do these manipulations. I set up the original data frame to conform to the tidy data principles (every column is a variable, every row is an observation), which is pretty much the base form of how we’ve discussed Tabular Data in class.\nI’ve snuck in some functions that have allowed me to FILTER, GROUP, and SUMMARIZE the data, often creating new dataframes as I do so. Hey, look! A handy cheatsheet for data transformation using the tidyverse!\nThese functions come from the dplyr package that gets installed as part of the tidyverse. The basic categories of actions are:\n\nmutate() adds new variables that are functions of existing variables\nselect() picks variables based on their names.\nfilter() picks cases based on their values.\nsummarise() reduces multiple values down to a single summary.\narrange() changes the ordering of the rows.\n\nAll of these work with group_by() so you can perform whichever operation on the groups that might be present in your data set.\nLet’s get back to improving our understanding of the relative value of NHL draft picks. The figure above considers a single draft class (2018), and shows the total number of NHL games all the players have accumulated, separating each draft round on an ordinal x axis.\nFine, I guess, but we still have to deal with overplotting, and think about whether a scatterplot really helps us accomplish our task. For this figure do the following:\n\n\nOverplotting. All those points on the y=0 line represent about 32 players each. Can you you think of a way that adding extra channels might help?\n\nLabelling. Can we create a solid figure caption and better axis labels for this figure? In your caption, please specify the task(s) the visualizaiton is intended to facilitate, as well as the marks, channels, and key-value pairs used.\n\nKey-Value pairs: Looks like we are using “round” as a continuous variable. Can we change this to an ordered factor?"
  },
  {
    "objectID": "posts/Winter Sports/index.html#scatterplot-with-overall-draft-position",
    "href": "posts/Winter Sports/index.html#scatterplot-with-overall-draft-position",
    "title": "Hockey DataViz (A5)",
    "section": "SCATTERPLOT WITH OVERALL DRAFT POSITION",
    "text": "SCATTERPLOT WITH OVERALL DRAFT POSITION\nThis approach might yield a better match with the scatterplot idiom. What if we ignore draft round, and use the player’s overall draft position instead? It also might help us focus on our motivating question! What is the potential value of pick 31, and how does Elias Lindholm compare to that value?\n\nCodeggplot(drafttot2018, aes(x=overall, y=totgames))+\n  geom_point()\n\n\n\n\nFor this figure, address the following:\n\nWe are trying to address the notion of trading pick 31. How might you facilitate the task of evaluating picks in that range?\nCreate a caption and better axis labels for this figure.\nWhat if we wanted to use more than just the 2018 draft class?"
  },
  {
    "objectID": "posts/Winter Sports/index.html#scatterplot-summary",
    "href": "posts/Winter Sports/index.html#scatterplot-summary",
    "title": "Hockey DataViz (A5)",
    "section": "SCATTERPLOT SUMMARY",
    "text": "SCATTERPLOT SUMMARY\nWe seem to be running into an issue in terms of overplotting. Scatterplots are great, but they work best for two quantitative attributes, and we have a situation with one or two keys and one quantitative attribute. The thing is, scatterplots can be very useful when part of our workflow involves modeling the data in some way. We’ll cover this kind of thing in future assignments, but just a bit of foreshadowing here:\n\nCodeggplot(drafttot2018, aes(x=round, y=totgames))+\n  geom_point()+\n  geom_smooth()\n\n`geom_smooth()` using method = 'loess' and formula = 'y ~ x'\n\n\n\n\n\nAdding the smoothed line doesn’t eliminate the overplotting problem, but it does indicate that it exists. We’ll cover other potential solutions (such as box plots and violin plots) to this issue later in the course, when we get to the notions of faceting and data reduction.\nWhy not include all the data? A scatter plot with that many players (4775) isn’t going to be great. But we could plot some sort of polynomial model to get a sense of the relationship between draft position and NHL games. We’ll filter to the first 8 years of their career.\n\nCodedrafttot&lt;- NHLDraft%&gt;%\n  filter(postdraft&lt;8)%&gt;%\n  group_by(playerId, round, overall, position, name)%&gt;%\n  summarise(totgames=sum(NHLgames))\n\n`summarise()` has grouped output by 'playerId', 'round', 'overall', 'position'.\nYou can override using the `.groups` argument.\n\nCodeggplot(drafttot, aes(x=overall, y=totgames))+\n  geom_smooth()\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'\n\n\n\n\n\nOr we could visualize the average number of games played as a function of time since being drafted.\n\nCodeggplot(NHLDraft, aes(x=postdraft, y=NHLgames))+\n  geom_smooth(aes(color=as.factor(round)))\n\n`geom_smooth()` using method = 'gam' and formula = 'y ~ s(x, bs = \"cs\")'"
  },
  {
    "objectID": "posts/Winter Sports/index.html#divergence",
    "href": "posts/Winter Sports/index.html#divergence",
    "title": "Hockey DataViz (A5)",
    "section": "DIVERGENCE",
    "text": "DIVERGENCE\nEnough esoteric wandering. The original version of this assignment focused on the relative value of draft picks in the NHL. This version has a more specific question. What might picks in the range of pick 31 conceivably yield? How often do picks in that range yield players of Elias Lindholm’s value?\nI guess we’d better figure out what Elias Lindholm brings to the table.\nCan you find him in our existing data? Can you think of a way to highlight him in the context of number of games played? What other kinds of data might we need to fairly evaluate Lindholm and pick 31?\nYou will be surprised how these seemingly simple questions force you to explore the nuances of working with and visualizing tabular data."
  },
  {
    "objectID": "posts/Winter Sports/index.html#simple-bar-chart",
    "href": "posts/Winter Sports/index.html#simple-bar-chart",
    "title": "Hockey DataViz (A5)",
    "section": "SIMPLE BAR CHART",
    "text": "SIMPLE BAR CHART\nOne of the best ways to deal with overplotting is to use our keys to SEPARATE and ORDER our data. Let’s do that now. I’ll stick with the summarized data for the 2018 draft year for now.\n\nCodeggplot(drafttot2018, aes(x = name, y=totgames))+\n  geom_col()\n\n\n\n\nEpic. We now have a bar (column, really) chart with the key being player name, and the attribute being the total number of games played. We’ve SEPARATED the data using the spatial x-axis position channel, and aligned to that axis as well. But this visualization clearly sucks. You need to make it better by:\n\nAdding a visual channel indicating draft round.\nFixing the order of the x axis.\nMaking a caption and better axis labels.\nFixing the values of the x axis labels so they aren’t such a mess."
  },
  {
    "objectID": "posts/Winter Sports/index.html#stacked-bar",
    "href": "posts/Winter Sports/index.html#stacked-bar",
    "title": "Hockey DataViz (A5)",
    "section": "STACKED BAR?",
    "text": "STACKED BAR?\nStacked bar charts use two keys and one value. Can we leverage this idiom? Perhaps if we used both round and postdraft as our keys and NHLgames as our value…\nThe idea here is that we might be able to get a sense of the temporal pattern of NHL games after a player is drafted. Do first round picks join the NHL earlier? Do they stay in the NHL longer? That kind of thing.\n\nCodeggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(-round)))+\n  geom_col(position = \"stack\")\n\n\n\nCodeNHLDraft &lt;-NHLDraft %&gt;%\n  mutate(descround = desc(as.factor(round)))\n\nrounds&lt;-c(\"darkred\",\"red\",\"pink\", \"violet\", \"lightblue\",\"blue\", \"darkblue\")\n\nggplot(NHLDraft, aes(x = postdraft, y=NHLgames, fill=as.factor(-round), \n                     alpha = as.factor(-round)))+\n  geom_col(position = \"stack\")+\n  theme(legend.position = \"none\")\n\nWarning: Using alpha for a discrete variable is not advised.\n\n\n\n\n\nThis seems like it has some potential, but it definitely needs some work (by you):\n\nYou know the drill by now. Caption! Labels!\nImprove the color palette.\nDo we really only want data from the 2018 draft class?\nConsider the order of rounds within the stack (glyph). Which round is most important? Change the order within the glyphs to reflect this."
  },
  {
    "objectID": "posts/Winter Sports/index.html#pie-charts-normalized-bar-charts",
    "href": "posts/Winter Sports/index.html#pie-charts-normalized-bar-charts",
    "title": "Hockey DataViz (A5)",
    "section": "PIE CHARTS / NORMALIZED BAR CHARTS",
    "text": "PIE CHARTS / NORMALIZED BAR CHARTS\nWe all know that Pie Charts are rarely a good choice, but let’s look at how to make one here. I’ll eliminate all the players drafted in 2018 who never played an NHL game, leaving us 80 players drafted in that year who made “THE SHOW”. Let’s look at how those 80 players were drafted:\n\nCodeplayedNHL2018 &lt;- drafttot2018%&gt;%\n  filter(totgames&gt;0)\n\nggplot(playedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")\n\n\n\n\nObviously this isn’t great, but can you state why? Write a little critique of this visualizaiton that:\n\nConsiders a player who played hundreds of games over their first five years vs a player who played one game in five years.\nEvaluates the relative value of a second round pick and a third round pick.\n\nNow let’s change this to account for the various years post draft:\n\nCodeseasonplayedNHL2018 &lt;- draft2018%&gt;%\n  filter(NHLgames&gt;0)\n\n\nggplot(seasonplayedNHL2018, aes(x = \"\", fill = factor(round))) +\n  geom_bar(width = 1) +\n  coord_polar(theta = \"y\")+\n  facet_wrap(~postdraft)\n\n\n\n\nSeems like there is something to work with here, but let’s compare this to a normalized bar chart:\n\nCodeggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=as.factor(round)))+\n  geom_col(position = \"fill\")\n\nWarning: Removed 218 rows containing missing values (`geom_col()`).\n\n\n\n\nCodeggplot(draft2018, aes(x = postdraft, y=NHLgames, fill=overall))+\n  geom_col(position = \"fill\")\n\nWarning: Removed 218 rows containing missing values (`geom_col()`).\n\n\n\n\n\nCan you work with this to make it a useful visualization for your friend, Cassandra Canuck?"
  },
  {
    "objectID": "posts/Winter Sports/index.html#heatmap",
    "href": "posts/Winter Sports/index.html#heatmap",
    "title": "Hockey DataViz (A5)",
    "section": "HEATMAP?",
    "text": "HEATMAP?\nCould this be useful?\n\nCoderound1&lt;-NHLDraft%&gt;%\n  filter(round==1)\n\nggplot(NHLDraft, aes(y = reorder(name, overall), x = postdraft, fill = NHLgames)) +\n  geom_tile(width = .5, height = 5) +\n  theme(plot.margin = unit(c(0,0,0,0), \"cm\"),\n        axis.line = element_blank(),\n        axis.text = element_blank(),\n        axis.ticks = element_blank(),\n        panel.grid.major = element_blank(),\n        panel.grid.minor = element_blank())+\n  scale_fill_gradient(low = \"blue\", high = \"red\")\n\n\n\nCodeggplot(NHLDraft, aes(y = overall, x = postdraft, z=NHLgames)) + \n  geom_tile(aes(fill=NHLgames))"
  },
  {
    "objectID": "posts/Winter Sports/index.html#other-stuff-to-consider",
    "href": "posts/Winter Sports/index.html#other-stuff-to-consider",
    "title": "Hockey DataViz (A5)",
    "section": "OTHER STUFF TO CONSIDER",
    "text": "OTHER STUFF TO CONSIDER\n\nDo these visualizations change as a function of player position?\nIs the number of NHL games played really the best metric to use?"
  },
  {
    "objectID": "posts/Winter Sports/index.html#conclusion",
    "href": "posts/Winter Sports/index.html#conclusion",
    "title": "Hockey DataViz (A5)",
    "section": "CONCLUSION",
    "text": "CONCLUSION\nBased on your visualizations, what would you advise regarding this trade proposal? Why?"
  },
  {
    "objectID": "posts/index.html",
    "href": "posts/index.html",
    "title": "“Welcome!”",
    "section": "",
    "text": "Green lacewing family Chrysopidae"
  }
]